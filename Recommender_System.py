import streamlit as st
import pandas as pd
import numpy as np
import ast
import re
import os
import pickle
import requests
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.stem.porter import PorterStemmer
import streamlit as st

# ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file CSV
credits_df = pd.read_csv('credits.csv')
movies_df = pd.read_csv('movies.csv')

# H√†m l√†m s·∫°ch ti√™u ƒë·ªÅ
def clean_title(title):
    return re.sub("[^a-zA-Z0-9 ]", "", title)

# H·ª£p nh·∫•t hai DataFrame d·ª±a tr√™n ti√™u ƒë·ªÅ
movies_df = movies_df.merge(credits_df, on='title')
movies_df = movies_df[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]

# Lo·∫°i b·ªè c√°c d√≤ng ch·ª©a gi√° tr·ªã null
movies_df.dropna(inplace=True)

# Chuy·ªÉn ƒë·ªïi gi√° tr·ªã tr∆∞·ªùng th√†nh 1 danh s√°ch
def convert(obj):
    L = []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L

movies_df['genres'] = movies_df['genres'].apply(convert)
movies_df['keywords'] = movies_df['keywords'].apply(convert)

# Chuy·ªÉn ƒë·ªïi gi√° tr·ªã tr∆∞·ªùng th√†nh 1 danh s√°ch, gi·ªõi h·∫°n t·ªëi ƒëa 3 ph·∫ßn t·ª≠
def convert_cast(obj):
    L = []
    counter = 0
    for i in ast.literal_eval(obj):
        if counter < 3:
            L.append(i['name'])
            counter += 1
        else:
            break
    return L

movies_df['cast'] = movies_df['cast'].apply(convert_cast)

# H√†m l·∫•y t√™n ƒë·∫°o di·ªÖn
def fetch_director(text):
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            return i['name']
    return ''

movies_df['director'] = movies_df['crew'].apply(fetch_director)

# L√†m s·∫°ch v√† chu·∫©n h√≥a c√°c c·ªôt
movies_df['overview'] = movies_df['overview'].apply(lambda x: str(x).split() if isinstance(x, str) else [])
movies_df['genres'] = movies_df['genres'].apply(lambda x: [i.replace(" ", "") for i in x])
movies_df['keywords'] = movies_df['keywords'].apply(lambda x: [i.replace(" ", "") for i in x])
movies_df['cast'] = movies_df['cast'].apply(lambda x: [i.replace(" ", "") for i in x])
movies_df['director'] = movies_df['director'].apply(lambda x: x.replace(" ", ""))

# T·∫°o c·ªôt 'tags' b·∫±ng c√°ch k·∫øt h·ª£p c√°c th·ªÉ lo·∫°i, di·ªÖn vi√™n, ƒë·∫°o di·ªÖn v√† t·ª´ kh√≥a
movies_df['tags'] = movies_df['overview'] + movies_df['genres'] + movies_df['keywords'] + movies_df['cast'] + movies_df['director'].apply(lambda x: [x])

# T·∫°o DataFrame m·ªõi ch·ªâ ch·ª©a c√°c c·ªôt c·∫ßn thi·∫øt
new_df = movies_df[['movie_id', 'title', 'tags']]

# K·∫øt h·ª£p c√°c tags th√†nh chu·ªói v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x).lower())

# H√†m Stemmer
ps = PorterStemmer()
def stem(text):
    y = [ps.stem(i) for i in text.split()]
    return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

@st.cache_data
def vectorize_and_calculate_similarity(new_df):
    # Vector h√≥a c√°c tags
    cv = CountVectorizer(max_features=5000, stop_words='english')
    vectors = cv.fit_transform(new_df['tags']).toarray()

    # T√≠nh to√°n ma tr·∫≠n ƒë·ªô t∆∞∆°ng ƒë·ªìng cosine
    similarity = cosine_similarity(vectors)
    return vectors, similarity

# T√≠nh to√°n vectors v√† similarity tr∆∞·ªõc khi l∆∞u
vectors, similarity = vectorize_and_calculate_similarity(new_df)

# T·∫°o th∆∞ m·ª•c 'model' n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists('model'):
    os.makedirs('model')

# L∆∞u m√¥ h√¨nh s·ª≠ d·ª•ng pickle
pickle.dump(movies_df, open('model/movie_list.pkl', 'wb'))
pickle.dump(similarity, open('model/similarity.pkl', 'wb'))

# Load m√¥ h√¨nh ƒë√£ l∆∞u
movies = pickle.load(open('model/movie_list.pkl', 'rb'))
similarity = pickle.load(open('model/similarity.pkl', 'rb'))

# H√†m g·ªçi API c·ªßa TMDb ƒë·ªÉ l·∫•y th√¥ng tin phim
def fetch_movie_details(movie_title, api_key):
    search_url = f"https://api.themoviedb.org/3/search/movie?api_key={api_key}&query={movie_title}"
    response = requests.get(search_url)
    data = response.json()
    if data['results']:
        movie_details = data['results'][0]
        return movie_details
    else:
        return None

# API key c·ªßa TMDb
tmdb_api_key = 'f14e7a213888a71a4c0fc62acbf44370'  # ƒê√£ thay th·∫ø b·∫±ng API key c·ªßa b·∫°n

# H√†m g·ª£i √Ω phim
def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movie_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
    recommended_movies = [new_df.iloc[i[0]].title for i in movie_list]
    return recommended_movies

# Kh·ªüi t·∫°o danh s√°ch phim y√™u th√≠ch
if 'favorite_movies' not in st.session_state:
    st.session_state['favorite_movies'] = []

if 'watched_movies' not in st.session_state:
    st.session_state['watched_movies'] = []

# CSS t√πy ch·ªânh
st.markdown(
    """
    <style>
    .custom-title {
        display: inline-flex; /* S·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ tr√™n 1 h√†ng */
        align-items: center; /* Canh gi·ªØa theo chi·ªÅu d·ªçc */
        justify-content: center; /* Canh gi·ªØa theo chi·ªÅu ngang */
        gap: 10px; /* Kho·∫£ng c√°ch gi·ªØa c√°c ph·∫ßn t·ª≠ */
        font-family: 'Arial', sans-serif; /* ƒê·ªïi font ch·ªØ */
        font-size: 48px; /* K√≠ch th∆∞·ªõc ch·ªØ */
        font-weight: bold; /* Ch·ªØ ƒë·∫≠m */
        color: red; /* M√†u ch·ªØ ƒë·ªè */
        text-shadow: 2px 2px 4px #000000; /* Hi·ªáu ·ª©ng b√≥ng */
        margin-top: 20px;
        margin-bottom: 20px;
        white-space: nowrap; /* ƒê·∫£m b·∫£o kh√¥ng xu·ªëng d√≤ng */
    }
    .custom-title img {
        height: 50px; /* Chi·ªÅu cao c·ªßa bi·ªÉu t∆∞·ª£ng */
    }
    .stButton>button {
        background-color: #ff6347;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stButton>button:hover {
        background-color: #ff4500;
    }
    .stSelectbox>div {
        color: #ff6347;
        border-radius: 8px;
    }
    .css-1y0tads {
        background-color: #ffffff;
        border-radius: 8px;
    }
    .stMarkdown {
        color: red;
    }
    .cute-sticker {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }
    .cute-sticker img {
        width: 80px;
        height: 80px;
        margin: 0 10px;
    }
    .white-text {
        color: white; /* ƒê·ªïi m√†u ch·ªØ th√†nh m√†u tr·∫Øng */
    }
    .poster-container {
        position: relative;
        display: inline-block;
        width: 300px; /* TƒÉng k√≠ch th∆∞·ªõc poster */
        margin-right: 30px; /* TƒÉng kho·∫£ng c√°ch gi·ªØa c√°c poster */
        margin-bottom: 40px; /* TƒÉng kho·∫£ng c√°ch d∆∞·ªõi m·ªói poster */
    }
    .info-box {
        position: absolute;
        top: 10px;
        left: 110%;
        background-color: rgb(0, 167, 153);
        color: white;
        padding: 10px;
        font-size: 14px;
        border-radius: 5px;
        display: none;
        z-index: 10;
        width: 250px;
        text-align: left;
    }
    .poster-container:hover .info-box {
        display: block;
    }
    .genre {
        font-size: 12px; /* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ th·ªÉ lo·∫°i */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Giao di·ªán Streamlit
st.markdown(
    '<div class="custom-title">üé¨ <span>RECOMMENDATION SYSTEM</span> üé•</div>', 
    unsafe_allow_html=True
)
st.markdown('<p class="white-text">Ch·ªçn m·ªôt b·ªô phim b·∫°n y√™u th√≠ch v√† ch√∫ng t√¥i s·∫Ω g·ª£i √Ω c√°c phim t∆∞∆°ng t·ª±.</p>', unsafe_allow_html=True)

# Kh·ªüi t·∫°o danh s√°ch phim y√™u th√≠ch
if 'favorite_movies' not in st.session_state:
    st.session_state.favorite_movies = []

# Kh·ªüi t·∫°o bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i g·ª£i √Ω v√† th√¥ng b√°o
if 'show_recommendations' not in st.session_state:
    st.session_state.show_recommendations = False
if 'notification' not in st.session_state:
    st.session_state.notification = None

# H√†m th√™m phim v√†o danh s√°ch y√™u th√≠ch
def add_to_favorites(movie_title):
    if movie_title not in st.session_state.favorite_movies:
        st.session_state.favorite_movies.append(movie_title)
        st.session_state.notification = f"{movie_title} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch!"
        st.session_state.show_recommendations = False
    else:
        st.session_state.notification = f"{movie_title} ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch c·ªßa b·∫°n!"

# Danh s√°ch phim v√† l·ª±a ch·ªçn phim
movie_list = movies_df['title'].tolist()
selected_movie = st.selectbox('Ch·ªçn phim', movie_list, key='selected_movie')


col1, col2 = st.columns([3, 1])  # T·∫°o 2 c·ªôt v·ªõi t·ª∑ l·ªá 3:1 ƒë·ªÉ n√∫t Y√äU TH√çCH n·∫±m b√™n ph·∫£i

with col1:
    if st.button('G·ª¢I √ù'):
        if selected_movie:
            # Get movie recommendations
            recommendations = recommend(selected_movie)
            
            if recommendations:
                st.write('## C√°c phim g·ª£i √Ω:')
                st.markdown("<hr>", unsafe_allow_html=True)
                
                cols = st.columns(3)  # Create 5 columns to display movie recommendations horizontally
                
                for idx, (col, rec) in enumerate(zip(cols, recommendations)):
                    with col:
                        # Fetch movie details
                        movie_details = fetch_movie_details(rec, tmdb_api_key)
                        
                        if movie_details:
                            # Display movie poster and details
                            poster_url = f"https://image.tmdb.org/t/p/w500{movie_details['poster_path']}"
                            st.image(poster_url, use_container_width=True)
                            # Create clickable link for IMDb
                            imdb_url = f"https://www.imdb.com/find?q={movie_details['title'].replace(' ', '+')}"
                            st.markdown(f"[**{movie_details['title']}**]({imdb_url})", unsafe_allow_html=True)
                            st.markdown(f"ƒê√°nh gi√°: {round(movie_details['vote_average'], 1)}/10")
                            st.markdown(f"Ng√†y ph√°t h√†nh: {movie_details['release_date']}")
                            
                            # Properly formatted clickable link for the trailer
                            trailer_url = f"https://www.youtube.com/results?search_query={movie_details['title'].replace(' ', '+')}+trailer"
                            st.markdown(f"[Xem trailer]({trailer_url})")
                        else:
                            st.write(f"Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin cho phim: {rec}.")
            else:
                st.write("Kh√¥ng c√≥ g·ª£i √Ω phim n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.")
        else:
            st.write('Vui l√≤ng ch·ªçn m·ªôt b·ªô phim ƒë·ªÉ nh·∫≠n g·ª£i √Ω.')

with col2:
    if st.button('Y√äU TH√çCH'):
        if selected_movie:
            add_to_favorites(selected_movie)

 #Hi·ªÉn th·ªã danh s√°ch y√™u th√≠ch ·ªü sidebar
with st.sidebar:
    st.write('## Phim y√™u th√≠ch:')
    for favorite_movie in st.session_state.favorite_movies:
        st.markdown(f"- {favorite_movie}")

  

# Th√™m ch·ª©c nƒÉng l·ªçc th·ªÉ lo·∫°i
genres = list(set([genre for sublist in movies_df['genres'].tolist() for genre in sublist]))
selected_genre = st.sidebar.selectbox('Ch·ªçn th·ªÉ lo·∫°i', genres)

# L·ªçc phim theo th·ªÉ lo·∫°i ƒë√£ ch·ªçn
filtered_movies = movies_df[movies_df['genres'].apply(lambda x: selected_genre in x)]

# Hi·ªÉn th·ªã danh s√°ch phim thu·ªôc th·ªÉ lo·∫°i n√†y trong giao di·ªán ch√≠nh
st.write(f"## Danh s√°ch phim thu·ªôc th·ªÉ lo·∫°i '{selected_genre}'")

columns = st.columns(3)  # T·∫°o 3 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã poster phim

for idx, title in enumerate(filtered_movies['title'].tolist()):
    movie_details = fetch_movie_details(title, tmdb_api_key)
    if movie_details:
        poster_url = f"https://image.tmdb.org/t/p/w500{movie_details['poster_path']}"
        movie_link = f"https://www.themoviedb.org/movie/{movie_details['id']}"
        with columns[idx % 3]:  # Hi·ªÉn th·ªã poster theo h√†ng, m·ªói h√†ng c√≥ 3 poster
            st.markdown(
                f"""
                <div class="poster-container">
                    <a href="{movie_link}" target="_blank">
                        <img src="{poster_url}" style="width:70%">
                    </a>
                    <div class="info-box">
                        <p><strong>NƒÉm s·∫£n xu·∫•t:</strong> {movie_details.get('release_date', 'N/A').split('-')[0]}</p>
                        <p><strong>M·ª©c ƒë·ªô ƒë√°nh gi√°:</strong> {round(movie_details.get('vote_average', 'N/A'))} /10</p>
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )
    else:
        st.write(f"Kh√¥ng c√≥ th√¥ng tin cho phim: {title}")





